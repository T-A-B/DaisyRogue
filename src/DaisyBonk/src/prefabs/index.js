import * as THREE from 'three';
import { rand } from '../utils/math.js';
import { makePatternTexture } from '../assets/textures.js';

// src/prefabs/index.js
export { makePawnMesh, makeWizardMesh, makeKnightMesh } from './enemies.js';

export function makeVoxelGround(size=48, h=0.6){
    const count = size*size;
    const geom = new THREE.BoxGeometry(1,1,1);
    const mat = new THREE.MeshStandardMaterial({ color:0x32405a, roughness:0.9, metalness:0.0 });
    const inst = new THREE.InstancedMesh(geom, mat, count);
    const dummy = new THREE.Object3D();
    let i=0;
    for(let z=0;z<size;z++){
        for(let x=0;x<size;x++){
            const y = 0;
            dummy.position.set(x - size/2 + 0.5, (y-0.5)*h, z - size/2 + 0.5);
            dummy.scale.setScalar(1);
            dummy.updateMatrix();
            inst.setMatrixAt(i++, dummy.matrix);
        }
    }
    inst.receiveShadow = true;
    return inst;
}

// export function makePortal(){
//     const g = new THREE.TorusKnotGeometry(1.0, 0.25, 128, 16);
//     const m = new THREE.MeshStandardMaterial({ color:0x7a7cff, emissive:0x383a8a, emissiveIntensity:0.8, metalness:0.2, roughness:0.35 });
//     const mesh = new THREE.Mesh(g, m);
//     mesh.castShadow = true;
//     const glow = new THREE.PointLight(0x7a7cff, 2.2, 12);
//     mesh.add(glow);
//     return mesh;
// }
// --- New enemy prefabs ---
export function makeRangedPawnMesh(){
    const g = new THREE.Group();
    const body = new THREE.Mesh(new THREE.CylinderGeometry(0.5,0.5,1.0,16), new THREE.MeshStandardMaterial({ color:0xff9898, emissive:0x331a1a }));
    body.position.y = 0.5; g.add(body);
    const band = new THREE.Mesh(new THREE.TorusGeometry(0.5,0.07,10,24), new THREE.MeshStandardMaterial({ color:0xffffff }));
    band.rotation.x = Math.PI/2; band.position.y = 0.9; g.add(band);
    return g;
}
export function makeSummonerMesh(){
    const g = new THREE.Group();
    const body = new THREE.Mesh(new THREE.CylinderGeometry(0.55,0.6,1.2,16), new THREE.MeshStandardMaterial({ color:0x7a7cff, emissive:0x1a1a33 }));
    body.position.y = 0.6; g.add(body);
    const halo = new THREE.Mesh(new THREE.TorusGeometry(0.65,0.06,12,24), new THREE.MeshStandardMaterial({ color:0x7a7cff, emissive:0x3b3b7a }));
    halo.rotation.x = Math.PI/2; halo.position.y = 1.1; g.add(halo);
    return g;
}
export function makeBeastmasterMesh(){
    const g = new THREE.Group();
    const torso = new THREE.Mesh(new THREE.DodecahedronGeometry(0.7), new THREE.MeshStandardMaterial({ color:0xffc96b, emissive:0x331f0a }));
    torso.position.y = 0.7; g.add(torso);
    const head = new THREE.Mesh(new THREE.ConeGeometry(0.35,0.5,16), new THREE.MeshStandardMaterial({ color:0x33210a, emissive:0x110a04 }));
    head.position.set(0, 1.2, 0); head.rotation.x = Math.PI; g.add(head);
    return g;
}
// Auto-generated by DaisyBonk Prefab Editor on 2025-10-16T00:14Z
// Prefab ID: prefab • Type:  • Author:
export function makePortal(){
        const g = new THREE.Group();
        const torus1 = new THREE.Mesh(
            new THREE.TorusGeometry(0.5, 0.2, 16, 24, 6.283185),
            new THREE.MeshStandardMaterial({ color:0xd116e9, metalness:0, roughness:0.9 })
        );
        torus1.scale.set(4, 5.4, 1);
        torus1.name = "Torus";
        g.add(torus1);
        const dodecahedron2 = new THREE.Mesh(
            new THREE.DodecahedronGeometry(0.6, 0),
            new THREE.MeshStandardMaterial({ color:0x36cea8, metalness:0.7, roughness:0.03 })
        );
        dodecahedron2.name = "Dodecahedron";
        g.add(dodecahedron2);
        const cone3 = new THREE.Mesh(
            new THREE.ConeGeometry(0.5, 1, 24, 1, false),
            new THREE.MeshStandardMaterial({ color:0xc1d364, metalness:0, roughness:0.9 })
        );
        cone3.position.set(0, 4, 0);
        cone3.name = "Cone";
        // Note: assign a texture map to this mesh at runtime if desired.
        // Example:
        // Cone.material.map = new THREE.TextureLoader().load('path/to.png');
        // Cone.material.map.repeat.set(1, 1);
        // Cone.material.map.offset.set(0, 0);
        g.add(cone3);
        return g;
    }
export function makeBeastPetMesh(){
    const g = new THREE.Group();
    const core = new THREE.Mesh(new THREE.SphereGeometry(0.35, 16, 16), new THREE.MeshStandardMaterial({ color:0xffaa66, emissive:0x3a1d00 }));
    core.position.y = 0.35; g.add(core);
    return g;
}
export function makePlayerMesh(){
    const g = new THREE.Group();
    const body = new THREE.Mesh(
        new THREE.BoxGeometry(0.9, 1.2, 0.9),
        new THREE.MeshStandardMaterial({ color:0xa9b6ff, roughness:0.3, metalness:0.1 })
    );
    body.castShadow = true;
    body.position.y = 0.6;
    g.add(body);
    const head = new THREE.Mesh(
        new THREE.BoxGeometry(0.6, 0.5, 0.6),
        new THREE.MeshStandardMaterial({ color:0xdfe6ff, roughness:0.3 })
    );
    head.position.set(0, 1.25, 0);
    head.castShadow = true;
    g.add(head);
    const visor = new THREE.Mesh(new THREE.BoxGeometry(0.62,0.16,0.06), new THREE.MeshStandardMaterial({ color:0x1f2a46, roughness:0.9 }));
    visor.position.set(0,1.28,0.33);
    g.add(visor);
    return g;
}

function enemyGeometryByType(t){
    switch(t){
        case 'cube': return new THREE.BoxGeometry(1,1,1);
        case 'rect': return new THREE.BoxGeometry(1.4, 0.9, 0.8);
        case 'pyramid': return new THREE.ConeGeometry(0.9, 1.2, 4);
        case 'cone': return new THREE.ConeGeometry(0.7, 1.4, 24);
        case 'dodec': return new THREE.DodecahedronGeometry(0.8);
        default: return new THREE.BoxGeometry(1,1,1);
    }
}
export function makeEnemyMesh(type){
    const geom = enemyGeometryByType(type);
    const tex = makePatternTexture(rand(), ['checker','stripes','dots'][Math.floor(Math.random()*3)]);
    const mat = new THREE.MeshStandardMaterial({
        map: tex, roughness:0.6, metalness:0.15, color: new THREE.Color().setHSL(Math.random(),0.35,0.6)
    });
    const m = new THREE.Mesh(geom, mat);
    m.castShadow = true; m.receiveShadow = true;
    m.position.y = 0.5;
    return m;
}
