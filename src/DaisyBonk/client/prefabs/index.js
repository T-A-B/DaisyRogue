import * as THREE from 'three';
import { rand } from '../utils/math.js';
import { makePatternTexture } from '../assets/textures.js';
import { AnimationManager } from '../engine/animationManager.js';

// src/prefabs/index.js
export { makePawnMesh, makeWizardMesh, makeKnightMesh } from './enemies.js';

export function makeVoxelGround(size=48, h=0.6){
    const count = size*size;
    const geom = new THREE.BoxGeometry(1,1,1);
    const mat = new THREE.MeshStandardMaterial({ color:0x32405a, roughness:0.9, metalness:0.0 });
    const inst = new THREE.InstancedMesh(geom, mat, count);
    const dummy = new THREE.Object3D();
    let i=0;
    for(let z=0;z<size;z++){
        for(let x=0;x<size;x++){
            const y = 0;
            dummy.position.set(x - size/2 + 0.5, (y-0.5)*h, z - size/2 + 0.5);
            dummy.scale.setScalar(1);
            dummy.updateMatrix();
            inst.setMatrixAt(i++, dummy.matrix);
        }
    }
    inst.receiveShadow = true;
    return inst;
}

// export function makePortal(){
//     const g = new THREE.TorusKnotGeometry(1.0, 0.25, 128, 16);
//     const m = new THREE.MeshStandardMaterial({ color:0x7a7cff, emissive:0x383a8a, emissiveIntensity:0.8, metalness:0.2, roughness:0.35 });
//     const mesh = new THREE.Mesh(g, m);
//     mesh.castShadow = true;
//     const glow = new THREE.PointLight(0x7a7cff, 2.2, 12);
//     mesh.add(glow);
//     return mesh;
// }
// --- New enemy prefabs ---
export function makeRangedPawnMesh(){
    const g = new THREE.Group();
    const body = new THREE.Mesh(new THREE.CylinderGeometry(0.5,0.5,1.0,16), new THREE.MeshStandardMaterial({ color:0xff9898, emissive:0x331a1a }));
    body.position.y = 0.5; g.add(body);
    const band = new THREE.Mesh(new THREE.TorusGeometry(0.5,0.07,10,24), new THREE.MeshStandardMaterial({ color:0xffffff }));
    band.rotation.x = Math.PI/2; band.position.y = 0.9; g.add(band);
    return g;
}
export function makeSummonerMesh(){
    const g = new THREE.Group();
    const body = new THREE.Mesh(new THREE.CylinderGeometry(0.55,0.6,1.2,16), new THREE.MeshStandardMaterial({ color:0x7a7cff, emissive:0x1a1a33 }));

    body.position.y = 0.6; g.add(body);
    const halo = new THREE.Mesh(new THREE.TorusGeometry(0.65,0.06,12,24), new THREE.MeshStandardMaterial({ color:0x7a7cff, emissive:0x3b3b7a }));
    halo.rotation.x = Math.PI/2; halo.position.y = 1.1; g.add(halo);
    return g;
}
export function makeBeastmasterMesh(){
    const g = new THREE.Group();
    const torso = new THREE.Mesh(new THREE.DodecahedronGeometry(0.7), new THREE.MeshStandardMaterial({ color:0xffc96b, emissive:0x331f0a }));
    torso.position.y = 0.7; g.add(torso);
    const head = new THREE.Mesh(new THREE.ConeGeometry(0.35,0.5,16), new THREE.MeshStandardMaterial({ color:0x33210a, emissive:0x110a04 }));
    head.position.set(0, 1.2, 0); head.rotation.x = Math.PI; g.add(head);
    return g;
}
// Auto-generated by DaisyBonk Prefab Editor on 2025-10-16T00:14Z
// Prefab ID: prefab • Type:  • Author:
export function makePortal() {

        const g = new THREE.Group();
        const _loader = new THREE.TextureLoader();
        const _tex = (file) => {
            const t = _loader.load("./assets/textures/prefab-2/" + file);
            t.wrapS = t.wrapT = THREE.RepeatWrapping;
            return t;
        };
        const torus1 = new THREE.Mesh(
            new THREE.TorusGeometry(0.5, 0.2, 16, 24, 6.283185),
            new THREE.MeshStandardMaterial({color: 0xcccccc, metalness: 0, roughness: 0.9})
        );
        torus1.name = "Torus";
        torus1.add
        g.add(torus1);
        {
            const _m = torus1.material;
            const _t = _tex("image(1).jpg");
            _t.repeat.set(1, 1);
            _t.offset.set(0, 0);
            _m.map = _t;
            _m.needsUpdate = true;
        }

        // Animation data (consumed by AnimationManager at runtime)
        g.userData.animations = {
            "idle": [
                {
                    "id": "g6p9pbm",
                    "target": "Torus",
                    "type": "rotate",
                    "axis": "y",
                    "angle": 90,
                    "duration": 15,
                    "loop": false,
                    "easing": "sineInOut"
                },
                {
                    "id": "4o9lcmy",
                    "target": "PrefabRoot",
                    "type": "scale",
                    "factor": 1.2,
                    "duration": 1.5,
                    "loop": true,
                    "easing": "sineInOut"
                }
            ]
        };
        attachAnimations(g);

        return g;

}
    export function makeBeastPetMesh() {
        const g = new THREE.Group();
        const core = new THREE.Mesh(new THREE.SphereGeometry(0.35, 16, 16), new THREE.MeshStandardMaterial({
            color: 0xffaa66,
            emissive: 0x3a1d00
        }));
        core.position.y = 0.35;
        g.add(core);
        attachAnimations(g);

        return g;
    }

    export function makePlayerMesh() {
        const g = new THREE.Group();
        const body = new THREE.Mesh(
            new THREE.BoxGeometry(0.9, 1.2, 0.9),
            new THREE.MeshStandardMaterial({color: 0xa9b6ff, roughness: 0.3, metalness: 0.1})
        );
        body.castShadow = true;
        body.position.y = 0.6;
        g.add(body);
        const head = new THREE.Mesh(
            new THREE.BoxGeometry(0.6, 0.5, 0.6),
            new THREE.MeshStandardMaterial({color: 0xdfe6ff, roughness: 0.3})
        );
        head.position.set(0, 1.25, 0);
        head.castShadow = true;
        g.add(head);
        const visor = new THREE.Mesh(new THREE.BoxGeometry(0.62, 0.16, 0.06), new THREE.MeshStandardMaterial({
            color: 0x1f2a46,
            roughness: 0.9
        }));
        visor.position.set(0, 1.28, 0.33);
        g.add(visor);
        attachAnimations(g);

        return g;
    }

    function attachAnimations(group, autoPlay = true) {
        if (!group?.userData?.animations) return null;
        try {
            const anim = new AnimationManager(group);
            if (autoPlay) {
                // Automatically start all sequences that are marked "idle" or similar
                if (group.userData.animations.idle) {
                    anim.play('idle');
                } else {
                    // Play the first sequence by default
                    const firstKey = Object.keys(group.userData.animations)[0];
                    if (firstKey) anim.play(firstKey);
                }
            }
            // Store reference for later
            group.userData.animationManager = anim;
            return anim;
        } catch (err) {
            console.warn('[AnimationManager] Failed to attach animations:', err);
            return null;
        }
    }

    function enemyGeometryByType(t) {
        switch (t) {
            case 'cube':
                return new THREE.BoxGeometry(1, 1, 1);
            case 'rect':
                return new THREE.BoxGeometry(1.4, 0.9, 0.8);
            case 'pyramid':
                return new THREE.ConeGeometry(0.9, 1.2, 4);
            case 'cone':
                return new THREE.ConeGeometry(0.7, 1.4, 24);
            case 'dodec':
                return new THREE.DodecahedronGeometry(0.8);
            default:
                return new THREE.BoxGeometry(1, 1, 1);
        }
    }


    export function makeEnemyMesh(type) {
        const geom = enemyGeometryByType(type);
        const tex = makePatternTexture(rand(), ['checker', 'stripes', 'dots'][Math.floor(Math.random() * 3)]);
        const mat = new THREE.MeshStandardMaterial({
            map: tex, roughness: 0.6, metalness: 0.15, color: new THREE.Color().setHSL(Math.random(), 0.35, 0.6)
        });
        const m = new THREE.Mesh(geom, mat);
        m.castShadow = true;
        m.receiveShadow = true;
        m.position.y = 0.5;

        return m;
    }

